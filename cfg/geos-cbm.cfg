FEATURES {
    STARTADDRESS: default = $0400;
}
SYMBOLS {
    __BACKBUFSIZE__:    type = weak, value = $2000;
    __HIMEM__:          type = weak, value = $8000 - __BACKBUFSIZE__;
    __OVERLAYSIZE__:    type = weak, value = $0000;
    __OVERLAYADDR__:    type = weak, value = __HIMEM__ - __OVERLAYSIZE__;
    __STACKSIZE__:      type = weak, value = $0400; # 1k stack
    __STACKADDR__:      type = weak, value = __OVERLAYADDR__ - __STACKSIZE__;
    __VLIR0_BLOCKS__:   type = export, value = ((__VLIR0_LAST__ - __VLIR0_START__ - __BSS_SIZE__) + 253) / 254;
    __VLIR1_BLOCKS__:   type = export, value = ((__VLIR1_LAST__ - __VLIR1_START__) + 253) / 254;
    __VLIR2_BLOCKS__:   type = export, value = ((__VLIR2_LAST__ - __VLIR2_START__) + 253) / 254;
    __VLIR3_BLOCKS__:   type = export, value = ((__VLIR3_LAST__ - __VLIR3_START__) + 253) / 254;
    __VLIR4_BLOCKS__:   type = export, value = ((__VLIR4_LAST__ - __VLIR4_START__) + 253) / 254;
    __VLIR5_BLOCKS__:   type = export, value = ((__VLIR5_LAST__ - __VLIR5_START__) + 253) / 254;
    __VLIR6_BLOCKS__:   type = export, value = ((__VLIR6_LAST__ - __VLIR6_START__) + 253) / 254;
    __VLIR7_BLOCKS__:   type = export, value = ((__VLIR7_LAST__ - __VLIR7_START__) + 253) / 254;
    __VLIR8_BLOCKS__:   type = export, value = ((__VLIR8_LAST__ - __VLIR8_START__) + 253) / 254;
    __VLIR9_BLOCKS__:   type = export, value = ((__VLIR9_LAST__ - __VLIR9_START__) + 253) / 254;
    __VLIR10_BLOCKS__:  type = export, value = ((__VLIR10_LAST__ - __VLIR10_START__) + 253) / 254;
    __VLIR11_BLOCKS__:  type = export, value = ((__VLIR11_LAST__ - __VLIR11_START__) + 253) / 254;
    __VLIR12_BLOCKS__:  type = export, value = ((__VLIR12_LAST__ - __VLIR12_START__) + 253) / 254;
    __VLIR13_BLOCKS__:  type = export, value = ((__VLIR13_LAST__ - __VLIR13_START__) + 253) / 254;
    __VLIR14_BLOCKS__:  type = export, value = ((__VLIR14_LAST__ - __VLIR14_START__) + 253) / 254;
    __VLIR15_BLOCKS__:  type = export, value = ((__VLIR15_LAST__ - __VLIR15_START__) + 253) / 254;
    __VLIR16_BLOCKS__:  type = export, value = ((__VLIR16_LAST__ - __VLIR16_START__) + 253) / 254;
    __VLIR17_BLOCKS__:  type = export, value = ((__VLIR17_LAST__ - __VLIR17_START__) + 253) / 254;
    __VLIR18_BLOCKS__:  type = export, value = ((__VLIR18_LAST__ - __VLIR18_START__) + 253) / 254;
    __VLIR19_BLOCKS__:  type = export, value = ((__VLIR19_LAST__ - __VLIR19_START__) + 253) / 254;
}
MEMORY {
    CVT:    file   = %O,  start = $0,              size = $40000;
    ZP:     define = yes, start = $58,             size = $1A + $06;
    VLIR0:  define = yes, start = %S,              size = __STACKADDR__ - %S;
    VLIR1:  define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR2:  define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR3:  define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR4:  define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR5:  define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR6:  define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR7:  define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR8:  define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR9:  define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR10: define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR11: define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR12: define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR13: define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR14: define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR15: define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR16: define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR17: define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR18: define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
    VLIR19: define = yes, start = __OVERLAYADDR__, size = __OVERLAYSIZE__;
}
SEGMENTS {
    ZEROPAGE:  type = zp,  load = ZP;
    EXTZP:     type = zp,  load = ZP,                                   optional = yes;
    DIRENTRY:  type = ro,                 load = CVT, align      = $FE;
    FILEINFO:  type = ro,                 load = CVT, align      = $FE;
    RECORDS:   type = ro,                 load = CVT, align      = $FE, optional = yes;
    STARTUP:   type = ro,  run  = VLIR0,  load = CVT, align_load = $FE, define   = yes;
    LOWCODE:   type = ro,  run  = VLIR0,  load = CVT,                   optional = yes;
    ONCE:      type = ro,  run  = VLIR0,  load = CVT,                   optional = yes;
    CODE:      type = ro,  run  = VLIR0,  load = CVT;
    RODATA:    type = ro,  run  = VLIR0,  load = CVT;
    DATA:      type = rw,  run  = VLIR0,  load = CVT;
    INIT:      type = bss, load = VLIR0,                                optional = yes;
    BSS:       type = bss, load = VLIR0,                                define   = yes;
    OVERLAY1:  type = ro,  run  = VLIR1,  load = CVT, align_load = $FE, optional = yes;
    OVERLAY2:  type = ro,  run  = VLIR2,  load = CVT, align_load = $FE, optional = yes;
    OVERLAY3:  type = ro,  run  = VLIR3,  load = CVT, align_load = $FE, optional = yes;
    OVERLAY4:  type = ro,  run  = VLIR4,  load = CVT, align_load = $FE, optional = yes;
    OVERLAY5:  type = ro,  run  = VLIR5,  load = CVT, align_load = $FE, optional = yes;
    OVERLAY6:  type = ro,  run  = VLIR6,  load = CVT, align_load = $FE, optional = yes;
    OVERLAY7:  type = ro,  run  = VLIR7,  load = CVT, align_load = $FE, optional = yes;
    OVERLAY8:  type = ro,  run  = VLIR8,  load = CVT, align_load = $FE, optional = yes;
    OVERLAY9:  type = ro,  run  = VLIR9,  load = CVT, align_load = $FE, optional = yes;
    OVERLAY10: type = ro,  run  = VLIR10, load = CVT, align_load = $FE, optional = yes;
    OVERLAY11: type = ro,  run  = VLIR11, load = CVT, align_load = $FE, optional = yes;
    OVERLAY12: type = ro,  run  = VLIR12, load = CVT, align_load = $FE, optional = yes;
    OVERLAY13: type = ro,  run  = VLIR13, load = CVT, align_load = $FE, optional = yes;
    OVERLAY14: type = ro,  run  = VLIR14, load = CVT, align_load = $FE, optional = yes;
    OVERLAY15: type = ro,  run  = VLIR15, load = CVT, align_load = $FE, optional = yes;
    OVERLAY16: type = ro,  run  = VLIR16, load = CVT, align_load = $FE, optional = yes;
    OVERLAY17: type = ro,  run  = VLIR17, load = CVT, align_load = $FE, optional = yes;
    OVERLAY18: type = ro,  run  = VLIR18, load = CVT, align_load = $FE, optional = yes;
    OVERLAY19: type = ro,  run  = VLIR19, load = CVT, align_load = $FE, optional = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
