;
; File generated by cc65 v 2.17 - Git 19925800
;
	.fopt		compiler,"cc65 v 2.17 - Git 19925800"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "ascii.c", 2312, 1554126600
	.dbg		file, "/opt/cc-6502/share/cc65/include/conio.h", 8941, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdarg.h", 2913, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/target.h", 3126, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/cbm.h", 11354, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stddef.h", 3057, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/c64.h", 6969, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/_vic2.h", 10835, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/_sid.h", 3626, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/_6526.h", 3962, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/cbm_filetype.h", 4949, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdio.h", 6189, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdlib.h", 5748, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdbool.h", 2506, 1554133537
	.forceimport	__STARTUP__
	.dbg		sym, "clrscr", "00", extern, "_clrscr"
	.dbg		sym, "cputc", "00", extern, "_cputc"
	.dbg		sym, "cprintf", "00", extern, "_cprintf"
	.dbg		sym, "cgetc", "00", extern, "_cgetc"
	.dbg		sym, "cursor", "00", extern, "_cursor"
	.dbg		sym, "screensize", "00", extern, "_screensize"
	.import		_clrscr
	.import		_cputc
	.import		_cprintf
	.import		_cgetc
	.import		_cursor
	.import		_screensize
	.export		_main

.segment	"RODATA"

L0011:
	.byte	$D4,$59,$50,$45,$20,$43,$48,$41,$52,$41,$43,$54,$45,$52,$53,$20
	.byte	$54,$4F,$20,$53,$45,$45,$0A,$0D,$54,$48,$45,$49,$52,$20,$48,$45
	.byte	$58,$41,$44,$45,$43,$49,$4D,$41,$4C,$20,$43,$4F,$44,$45,$0A,$0D
	.byte	$4E,$55,$4D,$42,$45,$52,$53,$20,$2D,$20,$27,$D1,$27,$20,$51,$55
	.byte	$49,$54,$53,$3A,$0A,$0D,$0D,$00
L0032:
	.byte	$3D,$24,$25,$30,$32,$58,$20,$00
L0041:
	.byte	$0A,$0D,$00
L003B	:=	L0041+0

.segment	"BSS"

_height:
	.res	1,$00
_width:
	.res	1,$00
_r:
	.res	1,$00
_t:
	.res	1,$00
_c:
	.res	2,$00

; ---------------------------------------------------------------
; int __near__ GET (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GET: near

	.dbg	func, "GET", "00", static, "_GET"

.segment	"CODE"

;
; PUT(c = (int)cgetc());
;
	.dbg	line, "ascii.c", 38
	jsr     _cgetc
	ldx     #$00
	sta     _c
	stx     _c+1
	jsr     _cputc
;
; return c;
;
	.dbg	line, "ascii.c", 39
	lda     _c
	ldx     _c+1
;
; }
;
	.dbg	line, "ascii.c", 40
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; clrscr();
;
	.dbg	line, "ascii.c", 55
	jsr     _clrscr
;
; r = 7;                          /* allow for prompt */
;
	.dbg	line, "ascii.c", 56
	lda     #$07
	sta     _r
;
; PRINT("Type characters to see\r\ntheir hexadecimal code\r\nnumbers - 'Q' quits:\r\n\n");
;
	.dbg	line, "ascii.c", 61
	lda     #<(L0011)
	ldx     #>(L0011)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; screensize(&width, &height);    /* get the screen's dimensions */
;
	.dbg	line, "ascii.c", 62
	lda     #<(_width)
	ldx     #>(_width)
	jsr     pushax
	lda     #<(_height)
	ldx     #>(_height)
	jsr     _screensize
;
; width /= 6;                     /* get number of codes on a line */
;
	.dbg	line, "ascii.c", 63
	lda     _width
	jsr     pusha0
	lda     #$06
	jsr     tosudiva0
	sta     _width
;
; cursor(true);
;
	.dbg	line, "ascii.c", 64
	lda     #$01
	jsr     _cursor
;
; while ((c = GET()) != EOF) {
;
	.dbg	line, "ascii.c", 66
	jmp     L0048
;
; if (r == height) {
;
	.dbg	line, "ascii.c", 69
L001C:	lda     _height
	cmp     _r
	bne     L0023
;
; clrscr();
;
	.dbg	line, "ascii.c", 70
	jsr     _clrscr
;
; t = 0;
;
	.dbg	line, "ascii.c", 71
	lda     #$00
	sta     _t
;
; PUT(c); /* echo char. again because screen was erased */
;
	.dbg	line, "ascii.c", 72
	lda     _c
	jsr     _cputc
;
; r = 1;
;
	.dbg	line, "ascii.c", 73
	lda     #$01
	sta     _r
;
; if (c == '\n')
;
	.dbg	line, "ascii.c", 75
L0023:	lda     _c+1
	bne     L002D
	lda     _c
	cmp     #$0D
	bne     L002D
;
; ++r;
;
	.dbg	line, "ascii.c", 76
	inc     _r
;
; PRINT("=$%02x ", c);
;
	.dbg	line, "ascii.c", 79
L002D:	lda     #<(L0032)
	ldx     #>(L0032)
	jsr     pushax
	lda     _c
	ldx     _c+1
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
;
; if (c == QUIT)
;
	.dbg	line, "ascii.c", 80
	lda     _c+1
	bne     L0047
	lda     _c
	cmp     #$D1
;
; break;
;
	.dbg	line, "ascii.c", 81
	beq     L001D
;
; if (++t == width) {
;
	.dbg	line, "ascii.c", 82
L0047:	inc     _t
	lda     _width
	cmp     _t
	bne     L0038
;
; PRINT("\r\n");
;
	.dbg	line, "ascii.c", 83
	lda     #<(L003B)
	ldx     #>(L003B)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; ++r;
;
	.dbg	line, "ascii.c", 84
	inc     _r
;
; t = 0;
;
	.dbg	line, "ascii.c", 85
L0048:	lda     #$00
	sta     _t
;
; while ((c = GET()) != EOF) {
;
	.dbg	line, "ascii.c", 66
L0038:	jsr     _GET
	sta     _c
	stx     _c+1
	cpx     #$FF
	bne     L001C
	cmp     #$FF
	bne     L001C
;
; PRINT("\r\n");
;
	.dbg	line, "ascii.c", 88
L001D:	lda     #<(L0041)
	ldx     #>(L0041)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; return EXIT_SUCCESS;
;
	.dbg	line, "ascii.c", 89
	ldx     #$00
	txa
;
; }
;
	.dbg	line, "ascii.c", 90
	rts
	.dbg	line

.endproc

