;
; File generated by cc65 v 2.17 - Git 19925800
;
	.fopt		compiler,"cc65 v 2.17 - Git 19925800"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "mandelbrot.c", 3861, 1554126600
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdlib.h", 5748, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/time.h", 5941, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/conio.h", 8941, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdarg.h", 2913, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/target.h", 3126, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/cbm.h", 11354, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stddef.h", 3057, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/c64.h", 6969, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/_vic2.h", 10835, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/_sid.h", 3626, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/_6526.h", 3962, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/cbm_filetype.h", 4949, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/tgi.h", 10823, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/tgi/tgi-error.h", 3568, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/cc65.h", 5139, 1554133537
	.forceimport	__STARTUP__
	.dbg		sym, "abs", "00", extern, "_abs"
	.dbg		sym, "exit", "00", extern, "_exit"
	.dbg		sym, "clock", "00", extern, "_clock"
	.dbg		sym, "clrscr", "00", extern, "_clrscr"
	.dbg		sym, "cputs", "00", extern, "_cputs"
	.dbg		sym, "cprintf", "00", extern, "_cprintf"
	.dbg		sym, "cgetc", "00", extern, "_cgetc"
	.dbg		sym, "tgi_stddrv", "00", extern, "_tgi_stddrv"
	.dbg		sym, "tgi_load_driver", "00", extern, "_tgi_load_driver"
	.dbg		sym, "tgi_init", "00", extern, "_tgi_init"
	.dbg		sym, "tgi_done", "00", extern, "_tgi_done"
	.dbg		sym, "tgi_geterror", "00", extern, "_tgi_geterror"
	.dbg		sym, "tgi_geterrormsg", "00", extern, "_tgi_geterrormsg"
	.dbg		sym, "tgi_clear", "00", extern, "_tgi_clear"
	.dbg		sym, "tgi_getcolorcount", "00", extern, "_tgi_getcolorcount"
	.dbg		sym, "tgi_setcolor", "00", extern, "_tgi_setcolor"
	.dbg		sym, "tgi_getxres", "00", extern, "_tgi_getxres"
	.dbg		sym, "tgi_getyres", "00", extern, "_tgi_getyres"
	.dbg		sym, "tgi_setpixel", "00", extern, "_tgi_setpixel"
	.dbg		sym, "doesclrscrafterexit", "00", extern, "_doesclrscrafterexit"
	.import		_abs
	.import		_exit
	.import		_clock
	.import		_clrscr
	.import		_cputs
	.import		_cprintf
	.import		_cgetc
	.import		_tgi_stddrv
	.import		_tgi_load_driver
	.import		_tgi_init
	.import		_tgi_done
	.import		_tgi_geterror
	.import		_tgi_geterrormsg
	.import		_tgi_clear
	.import		_tgi_getcolorcount
	.import		_tgi_setcolor
	.import		_tgi_getxres
	.import		_tgi_getyres
	.import		_tgi_setpixel
	.import		_doesclrscrafterexit
	.export		_mandelbrot
	.export		_main

.segment	"RODATA"

L0092:
	.byte	$C5,$52,$52,$4F,$52,$20,$23,$25,$44,$20,$49,$4E,$49,$54,$49,$41
	.byte	$4C,$49,$5A,$49,$4E,$47,$20,$47,$52,$41,$50,$48,$49,$43,$53,$2E
	.byte	$0A,$0D,$25,$53,$0A,$0D,$00
L00C7:
	.byte	$D0,$52,$45,$53,$53,$20,$41,$4E,$59,$20,$4B,$45,$59,$20,$57,$48
	.byte	$45,$4E,$20,$44,$4F,$4E,$45,$2E,$2E,$2E,$0D,$0A,$00
L0089:
	.byte	$49,$4E,$49,$54,$49,$41,$4C,$49,$5A,$49,$4E,$47,$2E,$2E,$2E,$20
	.byte	$4D,$4F,$4D,$50,$4C,$53,$0A,$0D,$00
L00C0:
	.byte	$54,$49,$4D,$45,$20,$20,$3A,$20,$25,$4C,$55,$2E,$25,$55,$53,$0D
	.byte	$0A,$00
L009D:
	.byte	$4F,$4B,$2E,$0D,$0A,$00

; ---------------------------------------------------------------
; void __near__ mandelbrot (signed short, signed short, signed short, signed short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mandelbrot: near

	.dbg	func, "mandelbrot", "00", extern, "_mandelbrot"
	.dbg	sym, "x1", "00", auto, 6
	.dbg	sym, "y1", "00", auto, 4
	.dbg	sym, "x2", "00", auto, 2
	.dbg	sym, "y2", "00", auto, 0
	.dbg	sym, "count", "00", register, "regbank", 5
	.dbg	sym, "r", "00", register, "regbank", 3
	.dbg	sym, "r1", "00", register, "regbank", 1

.segment	"BSS"

L000A:
	.res	2,$00
L000B:
	.res	2,$00
L000C:
	.res	2,$00
L000D:
	.res	2,$00
L000E:
	.res	2,$00
L000F:
	.res	2,$00
L0010:
	.res	2,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "mandelbrot.c", 49
	jsr     pushax
;
; register unsigned char count;
;
	.dbg	line, "mandelbrot.c", 50
	lda     regbank+5
	jsr     pusha
;
; register signed short r, r1, i;
;
	.dbg	line, "mandelbrot.c", 51
	lda     regbank+3
	ldx     regbank+4
	jsr     pushax
	lda     regbank+1
	ldx     regbank+2
	jsr     pushax
;
; xs = ((x2 - x1) / (SCREEN_X));
;
	.dbg	line, "mandelbrot.c", 56
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$0B
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     pushax
	jsr     _tgi_getxres
	jsr     tosudivax
	sta     L000B
	stx     L000B+1
;
; ys = ((y2 - y1) / (SCREEN_Y));
;
	.dbg	line, "mandelbrot.c", 57
	ldy     #$06
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$09
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     pushax
	jsr     _tgi_getyres
	jsr     tosudivax
	sta     L000C
	stx     L000C+1
;
; yy = y1;
;
	.dbg	line, "mandelbrot.c", 59
	ldy     #$0A
	lda     (sp),y
	sta     L000E+1
	dey
	lda     (sp),y
	sta     L000E
;
; for (y = 0; y < (SCREEN_Y); y++) {
;
	.dbg	line, "mandelbrot.c", 60
	lda     #$00
	sta     L0010
	sta     L0010+1
L001F:	lda     L0010
	ldx     L0010+1
	jsr     pushax
	jsr     _tgi_getyres
	jsr     tosicmp
	jcs     L0020
;
; yy += ys;
;
	.dbg	line, "mandelbrot.c", 61
	lda     L000C
	clc
	adc     L000E
	sta     L000E
	lda     L000C+1
	adc     L000E+1
	sta     L000E+1
;
; xx = x1;
;
	.dbg	line, "mandelbrot.c", 62
	ldy     #$0C
	lda     (sp),y
	sta     L000D+1
	dey
	lda     (sp),y
	sta     L000D
;
; for (x = 0; x < (SCREEN_X); x++) {
;
	.dbg	line, "mandelbrot.c", 63
	lda     #$00
	sta     L000F
	sta     L000F+1
L002E:	lda     L000F
	ldx     L000F+1
	jsr     pushax
	jsr     _tgi_getxres
	jsr     tosicmp
	jcs     L0021
;
; xx += xs;
;
	.dbg	line, "mandelbrot.c", 64
	lda     L000B
	clc
	adc     L000D
	sta     L000D
	lda     L000B+1
	adc     L000D+1
	sta     L000D+1
;
; r = 0;
;
	.dbg	line, "mandelbrot.c", 66
	lda     #$00
	sta     regbank+3
	sta     regbank+3+1
;
; i = 0;
;
	.dbg	line, "mandelbrot.c", 67
	sta     L000A
	sta     L000A+1
;
; for (count = 0; (count < maxiterations) &&
;
	.dbg	line, "mandelbrot.c", 68
	sta     regbank+5
L00CD:	lda     regbank+5
	cmp     #$20
	jcs     L00D1
;
; (fpabs (r) < tofp (2)) && (fpabs (i) < tofp (2));
;
	.dbg	line, "mandelbrot.c", 69
	lda     regbank+3
	ldx     regbank+3+1
	jsr     _abs
	cmp     #$00
	txa
	sbc     #$08
	bvc     L004E
	eor     #$80
L004E:	jpl     L00D1
	lda     L000A
	ldx     L000A+1
	jsr     _abs
	cmp     #$00
	txa
	sbc     #$08
	bvc     L0055
	eor     #$80
L0055:	jpl     L00D1
;
; r1 = (mulfp (r, r) - mulfp (i, i)) + xx;
;
	.dbg	line, "mandelbrot.c", 71
	lda     regbank+3
	ldx     regbank+3+1
	jsr     axlong
	jsr     pusheax
	lda     regbank+3
	ldx     regbank+3+1
	jsr     axlong
	jsr     tosmuleax
	txa
	ldx     sreg
	ldy     sreg+1
	sty     sreg
	cpy     #$80
	ldy     #$00
	bcc     L0060
	dey
L0060:	sty     sreg+1
	jsr     asreax2
	jsr     pusheax
	lda     L000A
	ldx     L000A+1
	jsr     axlong
	jsr     pusheax
	lda     L000A
	ldx     L000A+1
	jsr     axlong
	jsr     tosmuleax
	txa
	ldx     sreg
	ldy     sreg+1
	sty     sreg
	cpy     #$80
	ldy     #$00
	bcc     L0066
	dey
L0066:	sty     sreg+1
	jsr     asreax2
	jsr     tossubeax
	jsr     pusheax
	lda     L000D
	ldx     L000D+1
	jsr     axlong
	jsr     tosaddeax
	sta     regbank+1
	stx     regbank+1+1
;
; i = (((signed long) r * i) >> (fpshift - 1)) + yy;
;
	.dbg	line, "mandelbrot.c", 73
	lda     regbank+3
	ldx     regbank+3+1
	jsr     axlong
	jsr     pusheax
	lda     L000A
	ldx     L000A+1
	jsr     axlong
	jsr     tosmuleax
	txa
	ldx     sreg
	ldy     sreg+1
	sty     sreg
	cpy     #$80
	ldy     #$00
	bcc     L006D
	dey
L006D:	sty     sreg+1
	jsr     asreax1
	jsr     pusheax
	lda     L000E
	ldx     L000E+1
	jsr     axlong
	jsr     tosaddeax
	sta     L000A
	stx     L000A+1
;
; r = r1;
;
	.dbg	line, "mandelbrot.c", 74
	lda     regbank+1+1
	sta     regbank+3+1
	lda     regbank+1
	sta     regbank+3
;
; ++count) {
;
	.dbg	line, "mandelbrot.c", 70
	inc     regbank+5
	jmp     L00CD
;
; if (count == maxiterations) {
;
	.dbg	line, "mandelbrot.c", 76
L00D1:	lda     regbank+5
	cmp     #$20
	bne     L0070
;
; tgi_setcolor (0);
;
	.dbg	line, "mandelbrot.c", 77
	lda     #$00
;
; } else {
;
	.dbg	line, "mandelbrot.c", 78
	jmp     L00CC
;
; if (MAXCOL == 2) {
;
	.dbg	line, "mandelbrot.c", 79
L0070:	jsr     _tgi_getcolorcount
	cmp     #$02
	bne     L0075
;
; tgi_setcolor (1);
;
	.dbg	line, "mandelbrot.c", 80
	lda     #$01
;
; } else {
;
	.dbg	line, "mandelbrot.c", 81
	jmp     L00CC
;
; tgi_setcolor (count % MAXCOL);
;
	.dbg	line, "mandelbrot.c", 82
L0075:	lda     regbank+5
	jsr     pusha0
	jsr     _tgi_getcolorcount
	jsr     tosumodax
L00CC:	jsr     _tgi_setcolor
;
; tgi_setpixel (x, y);
;
	.dbg	line, "mandelbrot.c", 86
	lda     L000F
	ldx     L000F+1
	jsr     pushax
	lda     L0010
	ldx     L0010+1
	jsr     _tgi_setpixel
;
; for (x = 0; x < (SCREEN_X); x++) {
;
	.dbg	line, "mandelbrot.c", 63
	lda     L000F
	ldx     L000F+1
	clc
	adc     #$01
	bcc     L0038
	inx
L0038:	sta     L000F
	stx     L000F+1
	jmp     L002E
;
; for (y = 0; y < (SCREEN_Y); y++) {
;
	.dbg	line, "mandelbrot.c", 60
L0021:	lda     L0010
	ldx     L0010+1
	clc
	adc     #$01
	bcc     L0029
	inx
L0029:	sta     L0010
	stx     L0010+1
	jmp     L001F
;
; }
;
	.dbg	line, "mandelbrot.c", 89
L0020:	ldy     #$00
L0081:	lda     (sp),y
	sta     regbank+1,y
	iny
	cpy     #$05
	bne     L0081
	ldy     #$0D
	jmp     addysp
	.dbg	line

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"BSS"

L0083:
	.res	4,$00
L0084:
	.res	4,$00
L0085:
	.res	2,$00
L0086:
	.res	1,$00

.segment	"CODE"

;
; clrscr ();
;
	.dbg	line, "mandelbrot.c", 98
	jsr     _clrscr
;
; cprintf ("initializing... mompls\r\n");
;
	.dbg	line, "mandelbrot.c", 102
	lda     #<(L0089)
	ldx     #>(L0089)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; tgi_load_driver (tgi_stddrv);
;
	.dbg	line, "mandelbrot.c", 103
	lda     #<(_tgi_stddrv)
	ldx     #>(_tgi_stddrv)
	jsr     _tgi_load_driver
;
; err = tgi_geterror ();
;
	.dbg	line, "mandelbrot.c", 108
	jsr     _tgi_geterror
	sta     L0086
;
; if (err  != TGI_ERR_OK) {
;
	.dbg	line, "mandelbrot.c", 109
	lda     L0086
	beq     L008F
;
; cprintf ("Error #%d initializing graphics.\r\n%s\r\n",
;
	.dbg	line, "mandelbrot.c", 110
	lda     #<(L0092)
	ldx     #>(L0092)
	jsr     pushax
;
; err, tgi_geterrormsg (err));
;
	.dbg	line, "mandelbrot.c", 111
	lda     L0086
	jsr     pusha0
	lda     L0086
	jsr     _tgi_geterrormsg
	jsr     pushax
	ldy     #$06
	jsr     _cprintf
;
; if (doesclrscrafterexit ()) {
;
	.dbg	line, "mandelbrot.c", 112
	jsr     _doesclrscrafterexit
	tax
	beq     L00D2
;
; cgetc ();
;
	.dbg	line, "mandelbrot.c", 113
	jsr     _cgetc
;
; exit (EXIT_FAILURE);
;
	.dbg	line, "mandelbrot.c", 115
	ldx     #$00
L00D2:	lda     #$01
	jsr     _exit
;
; cprintf ("ok.\n\r");
;
	.dbg	line, "mandelbrot.c", 117
L008F:	lda     #<(L009D)
	ldx     #>(L009D)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; tgi_init ();
;
	.dbg	line, "mandelbrot.c", 120
	jsr     _tgi_init
;
; tgi_clear ();
;
	.dbg	line, "mandelbrot.c", 121
	jsr     _tgi_clear
;
; t = clock ();
;
	.dbg	line, "mandelbrot.c", 123
	jsr     _clock
	sta     L0083
	stx     L0083+1
	ldy     sreg
	sty     L0083+2
	ldy     sreg+1
	sty     L0083+3
;
; mandelbrot (tofp (-2), tofp (-2), tofp (2), tofp (2));
;
	.dbg	line, "mandelbrot.c", 126
	jsr     decsp6
	lda     #$00
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$F8
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$F8
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$08
	sta     (sp),y
	tax
	lda     #$00
	jsr     _mandelbrot
;
; t = clock () - t;
;
	.dbg	line, "mandelbrot.c", 128
	jsr     _clock
	jsr     pusheax
	lda     L0083+3
	sta     sreg+1
	lda     L0083+2
	sta     sreg
	ldx     L0083+1
	lda     L0083
	jsr     tossubeax
	sta     L0083
	stx     L0083+1
	ldy     sreg
	sty     L0083+2
	ldy     sreg+1
	sty     L0083+3
;
; cgetc ();
;
	.dbg	line, "mandelbrot.c", 131
	jsr     _cgetc
;
; tgi_done ();
;
	.dbg	line, "mandelbrot.c", 134
	jsr     _tgi_done
;
; sec = (t * 10) / CLK_TCK;
;
	.dbg	line, "mandelbrot.c", 137
	lda     L0083+3
	sta     sreg+1
	lda     L0083+2
	sta     sreg
	ldx     L0083+1
	lda     L0083
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumul0ax
	jsr     pusheax
	ldx     #$00
	lda     #$3C
	jsr     tosudiv0ax
	sta     L0084
	stx     L0084+1
	ldy     sreg
	sty     L0084+2
	ldy     sreg+1
	sty     L0084+3
;
; sec10 = sec % 10;
;
	.dbg	line, "mandelbrot.c", 138
	lda     L0084+3
	sta     sreg+1
	lda     L0084+2
	sta     sreg
	ldx     L0084+1
	lda     L0084
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	sta     L0085
	stx     L0085+1
;
; sec /= 10;
;
	.dbg	line, "mandelbrot.c", 139
	lda     L0084+3
	sta     sreg+1
	lda     L0084+2
	sta     sreg
	ldx     L0084+1
	lda     L0084
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	sta     L0084
	stx     L0084+1
	ldy     sreg
	sty     L0084+2
	ldy     sreg+1
	sty     L0084+3
;
; cprintf ("time  : %lu.%us\n\r", sec, sec10);
;
	.dbg	line, "mandelbrot.c", 142
	lda     #<(L00C0)
	ldx     #>(L00C0)
	jsr     pushax
	lda     L0084+3
	sta     sreg+1
	lda     L0084+2
	sta     sreg
	ldx     L0084+1
	lda     L0084
	jsr     pusheax
	lda     L0085
	ldx     L0085+1
	jsr     pushax
	ldy     #$08
	jsr     _cprintf
;
; if (doesclrscrafterexit ()) {
;
	.dbg	line, "mandelbrot.c", 144
	jsr     _doesclrscrafterexit
	tax
	beq     L00D4
;
; cputs ("Press any key when done...\n\r");
;
	.dbg	line, "mandelbrot.c", 146
	lda     #<(L00C7)
	ldx     #>(L00C7)
	jsr     _cputs
;
; cgetc ();
;
	.dbg	line, "mandelbrot.c", 147
	jsr     _cgetc
;
; return EXIT_SUCCESS;
;
	.dbg	line, "mandelbrot.c", 151
	ldx     #$00
	txa
;
; }
;
	.dbg	line, "mandelbrot.c", 152
L00D4:	rts
	.dbg	line

.endproc

