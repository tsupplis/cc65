;
; File generated by cc65 v 2.17 - Git 19925800
;
	.fopt		compiler,"cc65 v 2.17 - Git 19925800"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "enumdevdir.c", 2500, 1554126600
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdio.h", 6189, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stddef.h", 3057, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdarg.h", 2913, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/string.h", 5104, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/unistd.h", 4309, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdlib.h", 5748, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/device.h", 3212, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/dirent.h", 5324, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/cbm_filetype.h", 4949, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/cc65.h", 5139, 1554133537
	.forceimport	__STARTUP__
	.dbg		sym, "getchar", "00", extern, "_getchar"
	.dbg		sym, "printf", "00", extern, "_printf"
	.dbg		sym, "strcpy", "00", extern, "_strcpy"
	.dbg		sym, "chdir", "00", extern, "_chdir"
	.dbg		sym, "getcwd", "00", extern, "_getcwd"
	.dbg		sym, "realloc", "00", extern, "_realloc"
	.dbg		sym, "free", "00", extern, "_free"
	.dbg		sym, "getfirstdevice", "00", extern, "_getfirstdevice"
	.dbg		sym, "getnextdevice", "00", extern, "_getnextdevice"
	.dbg		sym, "getdevicedir", "00", extern, "_getdevicedir"
	.dbg		sym, "opendir", "00", extern, "_opendir"
	.dbg		sym, "readdir", "00", extern, "_readdir"
	.dbg		sym, "closedir", "00", extern, "_closedir"
	.dbg		sym, "doesclrscrafterexit", "00", extern, "_doesclrscrafterexit"
	.import		_getchar
	.import		_printf
	.import		_strcpy
	.import		_chdir
	.import		_getcwd
	.import		_realloc
	.import		_free
	.import		_getfirstdevice
	.import		_getnextdevice
	.import		_getdevicedir
	.import		_opendir
	.import		_readdir
	.import		_closedir
	.import		_doesclrscrafterexit
	.export		_printdir
	.export		_main

.segment	"RODATA"

L005F:
	.byte	$C4,$45,$56,$49,$43,$45,$20,$25,$44,$3A,$0D,$00
L0030:
	.byte	$20,$20,$C6,$49,$4C,$45,$20,$25,$53,$0D,$00
L0012:
	.byte	$20,$20,$C4,$49,$52,$20,$20,$25,$53,$0D,$00
L001B:
	.byte	$20,$C4,$49,$52,$20,$25,$53,$3A,$0D,$00
L006D:
	.byte	$20,$CE,$2F,$C1,$0D,$00
L0021:
	.byte	$2E,$00

; ---------------------------------------------------------------
; void __near__ printdir (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printdir: near

	.dbg	func, "printdir", "00", extern, "_printdir"
	.dbg	sym, "newdir", "00", auto, 0
	.dbg	sym, "olddir", "00", auto, -17
	.dbg	sym, "curdir", "00", auto, -34
	.dbg	sym, "dir", "00", auto, -36
	.dbg	sym, "ent", "00", auto, -38
	.dbg	sym, "subdirs", "00", auto, -40
	.dbg	sym, "dirnum", "00", auto, -42
	.dbg	sym, "num", "00", auto, -44

.segment	"CODE"

;
; {
;
	.dbg	line, "enumdevdir.c", 20
	jsr     pushax
;
; char *subdirs = NULL;
;
	.dbg	line, "enumdevdir.c", 25
	ldy     #$26
	jsr     subysp
	jsr     push0
;
; unsigned dirnum = 0;
;
	.dbg	line, "enumdevdir.c", 26
	jsr     push0
;
; getcwd (olddir, sizeof (olddir));
;
	.dbg	line, "enumdevdir.c", 29
	jsr     decsp2
	lda     sp
	ldx     sp+1
	clc
	adc     #$1B
	bcc     L000B
	inx
L000B:	jsr     pushax
	ldx     #$00
	lda     #$11
	jsr     _getcwd
;
; if (chdir (newdir)) {
;
	.dbg	line, "enumdevdir.c", 30
	ldy     #$2D
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _chdir
	stx     tmp1
	ora     tmp1
	beq     L000E
;
; printf ("  Dir  %s\n", newdir);
;
	.dbg	line, "enumdevdir.c", 35
	lda     #<(L0012)
	ldx     #>(L0012)
	jsr     pushax
	ldy     #$31
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
;
; return;
;
	.dbg	line, "enumdevdir.c", 36
	jmp     L0002
;
; getcwd (curdir, sizeof (curdir));
;
	.dbg	line, "enumdevdir.c", 42
L000E:	lda     sp
	ldx     sp+1
	clc
	adc     #$0A
	bcc     L0017
	inx
L0017:	jsr     pushax
	ldx     #$00
	lda     #$11
	jsr     _getcwd
;
; printf (" Dir %s:\n", curdir);
;
	.dbg	line, "enumdevdir.c", 43
	lda     #<(L001B)
	ldx     #>(L001B)
	jsr     pushax
	lda     sp
	ldx     sp+1
	clc
	adc     #$0C
	bcc     L001E
	inx
L001E:	jsr     pushax
	ldy     #$04
	jsr     _printf
;
; dir = opendir (".");
;
	.dbg	line, "enumdevdir.c", 48
	lda     #<(L0021)
	ldx     #>(L0021)
	jsr     _opendir
	ldy     #$08
	jsr     staxysp
;
; while (ent = readdir (dir)) {
;
	.dbg	line, "enumdevdir.c", 49
	jmp     L0033
;
; if (_DE_ISREG (ent->d_type)) {
;
	.dbg	line, "enumdevdir.c", 51
L0023:	ldy     #$07
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$15
	lda     (ptr1),y
	and     #$10
	beq     L0029
;
; printf ("  File %s\n", ent->d_name);
;
	.dbg	line, "enumdevdir.c", 52
	lda     #<(L0030)
	ldx     #>(L0030)
	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
;
; continue;
;
	.dbg	line, "enumdevdir.c", 53
	jmp     L0033
;
; if (_DE_ISDIR (ent->d_type)) {
;
	.dbg	line, "enumdevdir.c", 60
L0029:	ldy     #$07
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$15
	lda     (ptr1),y
	cmp     #$02
	bne     L0033
;
; subdirs = realloc (subdirs, FILENAME_MAX * (dirnum + 1));
;
	.dbg	line, "enumdevdir.c", 61
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$01
	bcc     L003D
	inx
L003D:	jsr     pushax
	lda     #$11
	jsr     tosumula0
	jsr     _realloc
	ldy     #$04
	jsr     staxysp
;
; strcpy (subdirs + FILENAME_MAX * dirnum++, ent->d_name);
;
	.dbg	line, "enumdevdir.c", 62
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0041
	inx
L0041:	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	lda     #$11
	jsr     tosumula0
	jsr     tosaddax
	jsr     pushax
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _strcpy
;
; while (ent = readdir (dir)) {
;
	.dbg	line, "enumdevdir.c", 49
L0033:	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _readdir
	ldy     #$06
	jsr     staxysp
	stx     tmp1
	ora     tmp1
	jne     L0023
;
; closedir (dir);
;
	.dbg	line, "enumdevdir.c", 65
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _closedir
;
; for (num = 0; num < dirnum; ++num) {
;
	.dbg	line, "enumdevdir.c", 67
	ldy     #$00
	tya
	sta     (sp),y
	iny
L0075:	sta     (sp),y
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L0046
;
; printdir (subdirs + FILENAME_MAX * num);
;
	.dbg	line, "enumdevdir.c", 68
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	lda     #$11
	jsr     tosumula0
	jsr     tosaddax
	jsr     _printdir
;
; for (num = 0; num < dirnum; ++num) {
;
	.dbg	line, "enumdevdir.c", 67
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	iny
	lda     #$00
	adc     (sp),y
	jmp     L0075
;
; free (subdirs);
;
	.dbg	line, "enumdevdir.c", 70
L0046:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _free
;
; chdir (olddir);
;
	.dbg	line, "enumdevdir.c", 72
	lda     sp
	ldx     sp+1
	clc
	adc     #$1B
	bcc     L0054
	inx
L0054:	jsr     _chdir
;
; }
;
	.dbg	line, "enumdevdir.c", 73
L0002:	ldy     #$2E
	jmp     addysp
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"
	.dbg	sym, "device", "00", auto, -1
	.dbg	sym, "devicedir", "00", auto, -18

.segment	"CODE"

;
; device = getfirstdevice ();
;
	.dbg	line, "enumdevdir.c", 84
	ldy     #$12
	jsr     subysp
	jsr     _getfirstdevice
;
; while (device != INVALID_DEVICE) {
;
	.dbg	line, "enumdevdir.c", 85
	jmp     L0077
;
; printf ("Device %d:\n", device);
;
	.dbg	line, "enumdevdir.c", 86
L005A:	lda     #<(L005F)
	ldx     #>(L005F)
	jsr     pushax
	ldy     #$13
	lda     (sp),y
	jsr     pusha0
	ldy     #$04
	jsr     _printf
;
; if (getdevicedir (device, devicedir, sizeof (devicedir))) {
;
	.dbg	line, "enumdevdir.c", 91
	jsr     decsp3
	ldy     #$14
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$03
	bcc     L0066
	inx
L0066:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$11
	jsr     _getdevicedir
	stx     tmp1
	ora     tmp1
	beq     L0062
;
; printdir (devicedir);
;
	.dbg	line, "enumdevdir.c", 92
	lda     sp
	ldx     sp+1
	jsr     _printdir
;
; } else {
;
	.dbg	line, "enumdevdir.c", 93
	jmp     L006B
;
; printf (" N/A\n");
;
	.dbg	line, "enumdevdir.c", 94
L0062:	lda     #<(L006D)
	ldx     #>(L006D)
	jsr     pushax
	ldy     #$02
	jsr     _printf
;
; device = getnextdevice (device);
;
	.dbg	line, "enumdevdir.c", 97
L006B:	ldy     #$11
	lda     (sp),y
	jsr     _getnextdevice
L0077:	ldy     #$11
	sta     (sp),y
;
; while (device != INVALID_DEVICE) {
;
	.dbg	line, "enumdevdir.c", 85
	cmp     #$FF
	bne     L005A
;
; if (doesclrscrafterexit ()) {
;
	.dbg	line, "enumdevdir.c", 100
	jsr     _doesclrscrafterexit
	tax
	beq     L0072
;
; getchar ();
;
	.dbg	line, "enumdevdir.c", 101
	jsr     _getchar
;
; }
;
	.dbg	line, "enumdevdir.c", 103
L0072:	ldy     #$12
	jmp     addysp
	.dbg	line

.endproc

