;
; File generated by cc65 v 2.17 - Git 19925800
;
	.fopt		compiler,"cc65 v 2.17 - Git 19925800"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "mousedemo.c", 7406, 1554126600
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdbool.h", 2506, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdlib.h", 5748, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/string.h", 5104, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stddef.h", 3057, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/mouse.h", 8806, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/pen.h", 3700, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/conio.h", 8941, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdarg.h", 2913, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/target.h", 3126, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/cbm.h", 11354, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/c64.h", 6969, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/_vic2.h", 10835, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/_sid.h", 3626, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/_6526.h", 3962, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/cbm_filetype.h", 4949, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/ctype.h", 8462, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/dbg.h", 5775, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/cc65.h", 5139, 1554133537
	.forceimport	__STARTUP__
	.forceimport	initmainargs
	.dbg		sym, "exit", "00", extern, "_exit"
	.dbg		sym, "mouse_def_callbacks", "00", extern, "_mouse_def_callbacks"
	.dbg		sym, "mouse_stddrv", "00", extern, "_mouse_stddrv"
	.dbg		sym, "mouse_load_driver", "00", extern, "_mouse_load_driver"
	.dbg		sym, "mouse_unload", "00", extern, "_mouse_unload"
	.dbg		sym, "mouse_geterrormsg", "00", extern, "_mouse_geterrormsg"
	.dbg		sym, "mouse_hide", "00", extern, "_mouse_hide"
	.dbg		sym, "mouse_show", "00", extern, "_mouse_show"
	.dbg		sym, "mouse_setbox", "00", extern, "_mouse_setbox"
	.dbg		sym, "mouse_getbox", "00", extern, "_mouse_getbox"
	.dbg		sym, "mouse_info", "00", extern, "_mouse_info"
	.dbg		sym, "pen_adjust", "00", extern, "_pen_adjust"
	.dbg		sym, "clrscr", "00", extern, "_clrscr"
	.dbg		sym, "kbhit", "00", extern, "_kbhit"
	.dbg		sym, "gotoxy", "00", extern, "_gotoxy"
	.dbg		sym, "cputs", "00", extern, "_cputs"
	.dbg		sym, "cputsxy", "00", extern, "_cputsxy"
	.dbg		sym, "cprintf", "00", extern, "_cprintf"
	.dbg		sym, "cgetc", "00", extern, "_cgetc"
	.dbg		sym, "cursor", "00", extern, "_cursor"
	.dbg		sym, "textcolor", "00", extern, "_textcolor"
	.dbg		sym, "bgcolor", "00", extern, "_bgcolor"
	.dbg		sym, "bordercolor", "00", extern, "_bordercolor"
	.dbg		sym, "cclearxy", "00", extern, "_cclearxy"
	.dbg		sym, "screensize", "00", extern, "_screensize"
	.dbg		sym, "tolower", "00", extern, "_tolower"
	.dbg		sym, "DbgInit", "00", extern, "_DbgInit"
	.dbg		sym, "doesclrscrafterexit", "00", extern, "_doesclrscrafterexit"
	.import		_exit
	.import		_mouse_def_callbacks
	.export		_mouse_def_pointercolor
	.import		_mouse_stddrv
	.import		_mouse_load_driver
	.import		_mouse_unload
	.import		_mouse_geterrormsg
	.import		_mouse_hide
	.import		_mouse_show
	.import		_mouse_setbox
	.import		_mouse_getbox
	.import		_mouse_info
	.import		_pen_adjust
	.import		_clrscr
	.import		_kbhit
	.import		_gotoxy
	.import		_cputs
	.import		_cputsxy
	.import		_cprintf
	.import		_cgetc
	.import		_cursor
	.import		_textcolor
	.import		_bgcolor
	.import		_bordercolor
	.import		_cclearxy
	.import		_screensize
	.import		_tolower
	.import		_DbgInit
	.import		_doesclrscrafterexit
	.export		_main

.segment	"RODATA"

_mouse_def_pointercolor:
	.byte	$00
L001A:
	.byte	$D7,$41,$52,$4E,$49,$4E,$47,$3A,$20,$D4,$48,$49,$53,$20,$50,$52
	.byte	$4F,$47,$52,$41,$4D,$20,$4E,$45,$45,$44,$53,$0A,$0D,$54,$48,$45
	.byte	$20,$44,$52,$49,$56,$45,$52,$20,$57,$49,$54,$48,$20,$54,$48,$45
	.byte	$20,$4E,$41,$4D,$45,$0A,$0D,$20,$20,$20,$20,$25,$53,$0A,$0D,$4F
	.byte	$4E,$20,$41,$20,$44,$49,$53,$4B,$21,$20,$D0,$52,$45,$53,$53,$20
	.byte	$27,$59,$27,$20,$49,$46,$20,$59,$4F,$55,$20,$48,$41,$56,$45,$20
	.byte	$49,$54,$3B,$0A,$0D,$4F,$52,$2C,$20,$41,$4E,$59,$20,$4F,$54,$48
	.byte	$45,$52,$20,$4B,$45,$59,$20,$54,$4F,$20,$45,$58,$49,$54,$2E,$0A
	.byte	$0D,$00
L006D:
	.byte	$20,$44,$29,$45,$42,$55,$47,$20,$20,$48,$29,$49,$44,$45,$20,$20
	.byte	$20,$51,$29,$55,$49,$54,$20,$20,$20,$53,$29,$48,$4F,$57,$20,$20
	.byte	$20,$4A,$29,$41,$49,$4C,$00
L0024:
	.byte	$CF,$CB,$2E,$20,$D0,$4C,$45,$41,$53,$45,$20,$57,$41,$49,$54,$20
	.byte	$50,$41,$54,$49,$45,$4E,$54,$4C,$59,$2E,$2E,$2E,$0A,$0D,$00
L011B:
	.byte	$D3,$50,$55,$52,$49,$4F,$55,$53,$20,$43,$48,$41,$52,$41,$43,$54
	.byte	$45,$52,$3A,$20,$24,$25,$30,$32,$D8,$00
L002F:
	.byte	$D0,$4F,$49,$4E,$54,$45,$52,$20,$49,$53,$20,$25,$53,$56,$49,$53
	.byte	$49,$42,$4C,$45,$25,$53,$2E,$00
L005C:
	.byte	$4D,$4F,$55,$53,$45,$A4,$4C,$4F,$41,$44,$A4,$44,$52,$49,$56,$45
	.byte	$52,$00
L0075:
	.byte	$25,$33,$55,$2C,$25,$33,$55,$0A,$0D,$25,$2A,$53,$7B,$00
L000D:
	.byte	$0D,$25,$53,$3A,$20,$25,$53,$28,$25,$55,$29,$0A,$0D,$00
L0120:
	.byte	$4D,$4F,$55,$53,$45,$A4,$55,$4E,$4C,$4F,$41,$44,$00
L0039:
	.byte	$20,$41,$4E,$44,$20,$4A,$41,$49,$4C,$45,$44,$00
L008F:
	.byte	$20,$D9,$20,$20,$3D,$20,$25,$33,$44,$0A,$0D,$00
L008B:
	.byte	$20,$D8,$20,$20,$3D,$20,$25,$33,$44,$0A,$0D,$00
L0093:
	.byte	$20,$C2,$31,$20,$3D,$20,$25,$43,$0A,$0D,$00
L0126:
	.byte	$C7,$4F,$4F,$44,$42,$59,$45,$21,$00
L009C:
	.byte	$20,$C2,$32,$20,$3D,$20,$25,$43,$00
L004F:
	.byte	$50,$45,$4E,$2E,$44,$41,$54,$00
L0032:
	.byte	$49,$4E,$00
L0035	:=	L001A+129
L003C	:=	L001A+129
L007C	:=	L001A+129

.segment	"BSS"

_mouse_name:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ __fastcall__ CheckError (__near__ const unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CheckError: near

	.dbg	func, "CheckError", "00", static, "_CheckError"
	.dbg	sym, "S", "00", auto, 1
	.dbg	sym, "Error", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "mousedemo.c", 54
	jsr     pusha
;
; if (Error != MOUSE_ERR_OK) {
;
	.dbg	line, "mousedemo.c", 55
	ldy     #$00
	lda     (sp),y
	beq     L000A
;
; cprintf ("\n%s: %s(%u)\r\n", S, mouse_geterrormsg (Error), Error);
;
	.dbg	line, "mousedemo.c", 56
	lda     #<(L000D)
	ldx     #>(L000D)
	jsr     pushax
	ldy     #$06
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	jsr     _mouse_geterrormsg
	jsr     pushax
	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	ldy     #$08
	jsr     _cprintf
;
; if (doesclrscrafterexit ()) {
;
	.dbg	line, "mousedemo.c", 61
	jsr     _doesclrscrafterexit
	tax
	beq     L012A
;
; cgetc ();
;
	.dbg	line, "mousedemo.c", 62
	jsr     _cgetc
;
; exit (EXIT_FAILURE);
;
	.dbg	line, "mousedemo.c", 64
	ldx     #$00
L012A:	lda     #$01
	jsr     _exit
;
; }
;
	.dbg	line, "mousedemo.c", 66
L000A:	jmp     incsp3
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ DoWarning (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoWarning: near

	.dbg	func, "DoWarning", "00", static, "_DoWarning"

.segment	"CODE"

;
; "or, any other key to exit.\r\n", mouse_stddrv);
;
	.dbg	line, "mousedemo.c", 84
	lda     #<(L001A)
	ldx     #>(L001A)
	jsr     pushax
	lda     #<(_mouse_stddrv)
	ldx     #>(_mouse_stddrv)
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
;
; if (tolower (cgetc ()) != 'y') {
;
	.dbg	line, "mousedemo.c", 85
	jsr     _cgetc
	ldx     #$00
	jsr     _tolower
	cpx     #$00
	bne     L012B
	cmp     #$59
	beq     L001D
;
; exit (EXIT_SUCCESS);
;
	.dbg	line, "mousedemo.c", 86
L012B:	ldx     #$00
	txa
	jsr     _exit
;
; cprintf ("OK. Please wait patiently...\r\n");
;
	.dbg	line, "mousedemo.c", 88
L001D:	lda     #<(L0024)
	ldx     #>(L0024)
	jsr     pushax
	ldy     #$02
	jmp     _cprintf
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ ShowState (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ShowState: near

	.dbg	func, "ShowState", "00", static, "_ShowState"
	.dbg	sym, "Jailed", "00", auto, 1
	.dbg	sym, "Invisible", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "mousedemo.c", 96
	jsr     pusha
;
; cclearxy (0, 7, 32);
;
	.dbg	line, "mousedemo.c", 97
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$07
	dey
	sta     (sp),y
	lda     #$20
	jsr     _cclearxy
;
; gotoxy (0, 7);
;
	.dbg	line, "mousedemo.c", 98
	lda     #$00
	jsr     pusha
	lda     #$07
	jsr     _gotoxy
;
; cprintf ("Pointer is %svisible%s.", Invisible? "in" : "", Jailed? " and jailed" : "");
;
	.dbg	line, "mousedemo.c", 99
	lda     #<(L002F)
	ldx     #>(L002F)
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	beq     L0033
	lda     #<(L0032)
	ldx     #>(L0032)
	jmp     L0036
L0033:	lda     #<(L0035)
	ldx     #>(L0035)
L0036:	jsr     pushax
	ldy     #$05
	lda     (sp),y
	beq     L003A
	lda     #<(L0039)
	ldx     #>(L0039)
	jmp     L003D
L003A:	lda     #<(L003C)
	ldx     #>(L003C)
L003D:	jsr     pushax
	ldy     #$06
	jsr     _cprintf
;
; }
;
	.dbg	line, "mousedemo.c", 100
	jmp     incsp2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; int __near__ __cdecl__ main (int, __near__ unsigned char * *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"
	.dbg	sym, "argc", "00", auto, 2
	.dbg	sym, "argv", "00", auto, 0
	.dbg	sym, "info", "00", auto, -5
	.dbg	sym, "full_box", "00", auto, -13
	.dbg	sym, "small_box", "00", auto, -21
	.dbg	sym, "width", "00", auto, -22
	.dbg	sym, "height", "00", auto, -23
	.dbg	sym, "C", "00", auto, -24
	.dbg	sym, "Invisible", "00", auto, -25
	.dbg	sym, "Done", "00", auto, -26
	.dbg	sym, "Jailed", "00", auto, -27

.segment	"CODE"

;
; bool Invisible = true, Done = false, Jailed = false;
;
	.dbg	line, "mousedemo.c", 114
	ldy     #$18
	jsr     subysp
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     pusha
;
; DbgInit (0);
;
	.dbg	line, "mousedemo.c", 117
	tax
	jsr     _DbgInit
;
; (void) bordercolor (COLOR_GRAY2);
;
	.dbg	line, "mousedemo.c", 121
	lda     #$0C
	jsr     _bordercolor
;
; (void) bgcolor (COLOR_WHITE);
;
	.dbg	line, "mousedemo.c", 122
	lda     #$01
	jsr     _bgcolor
;
; (void) textcolor (COLOR_GRAY1);
;
	.dbg	line, "mousedemo.c", 123
	lda     #$0B
	jsr     _textcolor
;
; cursor (0);
;
	.dbg	line, "mousedemo.c", 129
	lda     #$00
	jsr     _cursor
;
; clrscr ();
;
	.dbg	line, "mousedemo.c", 130
	jsr     _clrscr
;
; pen_adjust ("pen.dat");
;
	.dbg	line, "mousedemo.c", 138
	lda     #<(L004F)
	ldx     #>(L004F)
	jsr     _pen_adjust
;
; if (argc > 1) {
;
	.dbg	line, "mousedemo.c", 145
	ldy     #$1E
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$02
	txa
	sbc     #$00
	bvs     L0053
	eor     #$80
L0053:	bpl     L0051
;
; mouse_name = argv[1];
;
	.dbg	line, "mousedemo.c", 146
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	sta     _mouse_name+1
	dey
	lda     (ptr1),y
;
; } else {
;
	.dbg	line, "mousedemo.c", 147
	jmp     L0135
;
; DoWarning ();
;
	.dbg	line, "mousedemo.c", 149
L0051:	jsr     _DoWarning
;
; mouse_name = mouse_stddrv;
;
	.dbg	line, "mousedemo.c", 150
	lda     #>(_mouse_stddrv)
	sta     _mouse_name+1
	lda     #<(_mouse_stddrv)
L0135:	sta     _mouse_name
;
; CheckError ("mouse_load_driver",
;
	.dbg	line, "mousedemo.c", 154
	lda     #<(L005C)
	ldx     #>(L005C)
	jsr     pushax
;
; mouse_load_driver (&mouse_def_callbacks, mouse_name));
;
	.dbg	line, "mousedemo.c", 155
	lda     #<(_mouse_def_callbacks)
	ldx     #>(_mouse_def_callbacks)
	jsr     pushax
	lda     _mouse_name
	ldx     _mouse_name+1
	jsr     _mouse_load_driver
	jsr     _CheckError
;
; mouse_getbox (&full_box);
;
	.dbg	line, "mousedemo.c", 169
	lda     sp
	ldx     sp+1
	clc
	adc     #$0E
	bcc     L0063
	inx
L0063:	jsr     _mouse_getbox
;
; screensize (&width, &height);
;
	.dbg	line, "mousedemo.c", 171
	lda     sp
	ldx     sp+1
	clc
	adc     #$05
	bcc     L0066
	inx
L0066:	jsr     pushax
	lda     sp
	ldx     sp+1
	clc
	adc     #$06
	bcc     L0068
	inx
L0068:	jsr     _screensize
;
; clrscr ();
;
	.dbg	line, "mousedemo.c", 174
L0069:	jsr     _clrscr
;
; cputs (" d)ebug  h)ide   q)uit   s)how   j)ail");
;
	.dbg	line, "mousedemo.c", 177
	lda     #<(L006D)
	ldx     #>(L006D)
	jsr     _cputs
;
; gotoxy (width / 2 - 3, height / 2 - 1);
;
	.dbg	line, "mousedemo.c", 180
	ldy     #$05
	lda     (sp),y
	lsr     a
	sec
	sbc     #$03
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	lsr     a
	sec
	sbc     #$01
	jsr     _gotoxy
;
; cprintf ("%3u,%3u\r\n%*s\xDB", width / 2 * 8 + 4, height / 2 * 8 + 4,
;
	.dbg	line, "mousedemo.c", 182
	lda     #<(L0075)
	ldx     #>(L0075)
	jsr     pushax
	ldy     #$07
	ldx     #$00
	lda     (sp),y
	lsr     a
	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     #$04
	bcc     L0078
	inx
L0078:	jsr     pushax
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	lsr     a
	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     #$04
	bcc     L007A
	inx
L007A:	jsr     pushax
;
; width / 2, "");
;
	.dbg	line, "mousedemo.c", 183
	ldy     #$0B
	lda     (sp),y
	lsr     a
	jsr     pusha0
	lda     #<(L007C)
	ldx     #>(L007C)
	jsr     pushax
	ldy     #$0A
	jsr     _cprintf
;
; ShowState (Jailed, Invisible);
;
	.dbg	line, "mousedemo.c", 190
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     _ShowState
;
; mouse_info (&info);
;
	.dbg	line, "mousedemo.c", 193
L0081:	lda     sp
	ldx     sp+1
	clc
	adc     #$16
	bcc     L0086
	inx
L0086:	jsr     _mouse_info
;
; gotoxy (0, 2);
;
	.dbg	line, "mousedemo.c", 194
	lda     #$00
	jsr     pusha
	lda     #$02
	jsr     _gotoxy
;
; cprintf (" X  = %3d\r\n", info.pos.x);
;
	.dbg	line, "mousedemo.c", 195
	lda     #<(L008B)
	ldx     #>(L008B)
	jsr     pushax
	ldy     #$1B
	jsr     pushwysp
	ldy     #$04
	jsr     _cprintf
;
; cprintf (" Y  = %3d\r\n", info.pos.y);
;
	.dbg	line, "mousedemo.c", 196
	lda     #<(L008F)
	ldx     #>(L008F)
	jsr     pushax
	ldy     #$1D
	jsr     pushwysp
	ldy     #$04
	jsr     _cprintf
;
; cprintf (" B1 = %c\r\n", (info.buttons & MOUSE_BTN_LEFT) ?
;
	.dbg	line, "mousedemo.c", 197
	lda     #<(L0093)
	ldx     #>(L0093)
	jsr     pushax
	ldy     #$1C
	lda     (sp),y
	and     #$10
;
; 0x5F
;
	.dbg	line, "mousedemo.c", 199
	beq     L012F
;
; : '^');
;
	.dbg	line, "mousedemo.c", 203
	lda     #$5F
	jmp     L0099
L012F:	lda     #$5E
L0099:	jsr     pusha0
	ldy     #$04
	jsr     _cprintf
;
; cprintf (" B2 = %c", (info.buttons & MOUSE_BTN_RIGHT) ?
;
	.dbg	line, "mousedemo.c", 204
	lda     #<(L009C)
	ldx     #>(L009C)
	jsr     pushax
	ldy     #$1C
	lda     (sp),y
	and     #$01
;
; 0x5F
;
	.dbg	line, "mousedemo.c", 206
	beq     L0130
;
; : '^');
;
	.dbg	line, "mousedemo.c", 210
	lda     #$5F
	jmp     L00A2
L0130:	lda     #$5E
L00A2:	jsr     pusha0
	ldy     #$04
	jsr     _cprintf
;
; if (kbhit ()) {
;
	.dbg	line, "mousedemo.c", 213
	jsr     _kbhit
	tax
	jeq     L00AE
;
; cclearxy (1, 9, 23);
;
	.dbg	line, "mousedemo.c", 214
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     #$09
	dey
	sta     (sp),y
	lda     #$17
	jsr     _cclearxy
;
; switch (tolower (C = cgetc ())) {
;
	.dbg	line, "mousedemo.c", 215
	jsr     _cgetc
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	jsr     _tolower
;
; }
;
	.dbg	line, "mousedemo.c", 269
	cpx     #$00
	jne     L0116
	cmp     #$44
	beq     L00B0
	cmp     #$48
	beq     L00BB
	cmp     #$4A
	beq     L00C1
	cmp     #$51
	jeq     L0133
	cmp     #$53
	jeq     L010B
	jmp     L0116
;
; BREAK();
;
	.dbg	line, "mousedemo.c", 217
L00B0:	brk
;
; (void) bordercolor (COLOR_GRAY2);
;
	.dbg	line, "mousedemo.c", 223
	lda     #$0C
	jsr     _bordercolor
;
; (void) bgcolor (COLOR_WHITE);
;
	.dbg	line, "mousedemo.c", 224
	lda     #$01
	jsr     _bgcolor
;
; (void) textcolor (COLOR_GRAY1);
;
	.dbg	line, "mousedemo.c", 225
	lda     #$0B
	jsr     _textcolor
;
; goto top;
;
	.dbg	line, "mousedemo.c", 233
	jmp     L0069
;
; mouse_hide ();
;
	.dbg	line, "mousedemo.c", 236
L00BB:	jsr     _mouse_hide
;
; ShowState (Jailed, ++Invisible);
;
	.dbg	line, "mousedemo.c", 237
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jsr     _ShowState
;
; break;
;
	.dbg	line, "mousedemo.c", 238
	jmp     L00AE
;
; if (Jailed) {
;
	.dbg	line, "mousedemo.c", 241
L00C1:	lda     (sp,x)
	beq     L00C2
;
; mouse_setbox (&full_box);
;
	.dbg	line, "mousedemo.c", 242
	lda     sp
	ldx     sp+1
	clc
	adc     #$0E
	bcc     L00C6
	inx
L00C6:	jsr     _mouse_setbox
;
; Jailed = false;
;
	.dbg	line, "mousedemo.c", 243
	lda     #$00
;
; } else {
;
	.dbg	line, "mousedemo.c", 244
	jmp     L0136
;
; small_box.minx = max (info.pos.x - 10, full_box.minx);
;
	.dbg	line, "mousedemo.c", 245
L00C2:	ldy     #$17
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$0A
	bcs     L00CF
	dex
L00CF:	jsr     pushax
	ldy     #$11
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L00D1
	beq     L00D1
	ldy     #$17
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$0A
	bcs     L00D5
	dex
	jmp     L00D5
L00D1:	ldy     #$0F
	lda     (sp),y
	tax
	dey
	lda     (sp),y
L00D5:	ldy     #$06
	jsr     staxysp
;
; small_box.miny = max (info.pos.y - 10, full_box.miny);
;
	.dbg	line, "mousedemo.c", 246
	ldy     #$19
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$0A
	bcs     L00DD
	dex
L00DD:	jsr     pushax
	ldy     #$13
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L00DF
	beq     L00DF
	ldy     #$19
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$0A
	bcs     L00E3
	dex
	jmp     L00E3
L00DF:	ldy     #$11
	lda     (sp),y
	tax
	dey
	lda     (sp),y
L00E3:	ldy     #$08
	jsr     staxysp
;
; small_box.maxx = min (info.pos.x + 10, full_box.maxx);
;
	.dbg	line, "mousedemo.c", 247
	ldy     #$17
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0A
	bcc     L00EB
	inx
L00EB:	ldy     #$12
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L012C
	eor     #$80
L012C:	bpl     L0131
	ldy     #$17
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0A
	bcc     L00F1
	inx
	jmp     L00F1
L0131:	lda     (sp),y
	tax
	dey
	lda     (sp),y
L00F1:	ldy     #$0A
	jsr     staxysp
;
; small_box.maxy = min (info.pos.y + 10, full_box.maxy);
;
	.dbg	line, "mousedemo.c", 248
	ldy     #$19
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0A
	bcc     L00F9
	inx
L00F9:	ldy     #$14
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L012D
	eor     #$80
L012D:	bpl     L0132
	ldy     #$19
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0A
	bcc     L00FF
	inx
	jmp     L00FF
L0132:	lda     (sp),y
	tax
	dey
	lda     (sp),y
L00FF:	ldy     #$0C
	jsr     staxysp
;
; mouse_setbox (&small_box);
;
	.dbg	line, "mousedemo.c", 249
	lda     sp
	ldx     sp+1
	clc
	adc     #$06
	bcc     L0104
	inx
L0104:	jsr     _mouse_setbox
;
; Jailed = true;
;
	.dbg	line, "mousedemo.c", 250
	lda     #$01
L0136:	ldy     #$00
	sta     (sp),y
;
; ShowState (Jailed, Invisible);
;
	.dbg	line, "mousedemo.c", 252
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     _ShowState
;
; break;
;
	.dbg	line, "mousedemo.c", 253
	jmp     L00AE
;
; mouse_show ();
;
	.dbg	line, "mousedemo.c", 256
L010B:	jsr     _mouse_show
;
; if (Invisible) {
;
	.dbg	line, "mousedemo.c", 257
	ldy     #$02
	lda     (sp),y
	beq     L00AE
;
; ShowState (Jailed, --Invisible);
;
	.dbg	line, "mousedemo.c", 258
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	jsr     _ShowState
;
; break;
;
	.dbg	line, "mousedemo.c", 260
	jmp     L00AE
;
; Done = true;
;
	.dbg	line, "mousedemo.c", 263
L0133:	lda     #$01
	tay
	sta     (sp),y
;
; break;
;
	.dbg	line, "mousedemo.c", 264
	jmp     L0134
;
; gotoxy (1, 9);
;
	.dbg	line, "mousedemo.c", 267
L0116:	lda     #$01
	jsr     pusha
	lda     #$09
	jsr     _gotoxy
;
; cprintf ("Spurious character: $%02X", C);
;
	.dbg	line, "mousedemo.c", 268
	lda     #<(L011B)
	ldx     #>(L011B)
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	jsr     pusha0
	ldy     #$04
	jsr     _cprintf
;
; } while (!Done);
;
	.dbg	line, "mousedemo.c", 271
L00AE:	ldy     #$01
L0134:	lda     (sp),y
	jeq     L0081
;
; CheckError ("mouse_unload", mouse_unload ());
;
	.dbg	line, "mousedemo.c", 275
	lda     #<(L0120)
	ldx     #>(L0120)
	jsr     pushax
	jsr     _mouse_unload
	jsr     _CheckError
;
; cputsxy (0, height / 2 + 3, "Goodbye!");
;
	.dbg	line, "mousedemo.c", 282
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	ldy     #$06
	lda     (sp),y
	lsr     a
	clc
	adc     #$03
	ldy     #$00
	sta     (sp),y
	lda     #<(L0126)
	ldx     #>(L0126)
	jsr     _cputsxy
;
; return EXIT_SUCCESS;
;
	.dbg	line, "mousedemo.c", 283
	ldx     #$00
	txa
;
; }
;
	.dbg	line, "mousedemo.c", 284
	ldy     #$1F
	jmp     addysp
	.dbg	line

.endproc

