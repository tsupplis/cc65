;
; File generated by cc65 v 2.17 - Git 19925800
;
	.fopt		compiler,"cc65 v 2.17 - Git 19925800"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "tgidemo.c", 5361, 1554126600
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdio.h", 6189, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stddef.h", 3057, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdarg.h", 2913, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/stdlib.h", 5748, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/cc65.h", 5139, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/conio.h", 8941, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/target.h", 3126, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/cbm.h", 11354, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/c64.h", 6969, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/_vic2.h", 10835, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/_sid.h", 3626, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/_6526.h", 3962, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/cbm_filetype.h", 4949, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/ctype.h", 8462, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/modload.h", 4982, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/tgi.h", 10823, 1554133537
	.dbg		file, "/opt/cc-6502/share/cc65/include/tgi/tgi-error.h", 3568, 1554133537
	.forceimport	__STARTUP__
	.dbg		sym, "printf", "00", extern, "_printf"
	.dbg		sym, "exit", "00", extern, "_exit"
	.dbg		sym, "sin", "00", extern, "_sin"
	.dbg		sym, "doesclrscrafterexit", "00", extern, "_doesclrscrafterexit"
	.dbg		sym, "kbhit", "00", extern, "_kbhit"
	.dbg		sym, "cgetc", "00", extern, "_cgetc"
	.dbg		sym, "bordercolor", "00", extern, "_bordercolor"
	.dbg		sym, "tolower", "00", extern, "_tolower"
	.dbg		sym, "tgi_stddrv", "00", extern, "_tgi_stddrv"
	.dbg		sym, "tgi_load_driver", "00", extern, "_tgi_load_driver"
	.dbg		sym, "tgi_unload", "00", extern, "_tgi_unload"
	.dbg		sym, "tgi_init", "00", extern, "_tgi_init"
	.dbg		sym, "tgi_geterror", "00", extern, "_tgi_geterror"
	.dbg		sym, "tgi_clear", "00", extern, "_tgi_clear"
	.dbg		sym, "tgi_setcolor", "00", extern, "_tgi_setcolor"
	.dbg		sym, "tgi_setpalette", "00", extern, "_tgi_setpalette"
	.dbg		sym, "tgi_getmaxx", "00", extern, "_tgi_getmaxx"
	.dbg		sym, "tgi_getmaxy", "00", extern, "_tgi_getmaxy"
	.dbg		sym, "tgi_getaspectratio", "00", extern, "_tgi_getaspectratio"
	.dbg		sym, "tgi_gotoxy", "00", extern, "_tgi_gotoxy"
	.dbg		sym, "tgi_line", "00", extern, "_tgi_line"
	.dbg		sym, "tgi_lineto", "00", extern, "_tgi_lineto"
	.dbg		sym, "tgi_ellipse", "00", extern, "_tgi_ellipse"
	.dbg		sym, "tgi_bar", "00", extern, "_tgi_bar"
	.dbg		sym, "tgi_imulround", "00", extern, "_tgi_imulround"
	.import		_printf
	.import		_exit
	.import		_sin
	.import		_doesclrscrafterexit
	.import		_kbhit
	.import		_cgetc
	.import		_bordercolor
	.import		_tolower
	.import		_tgi_stddrv
	.import		_tgi_load_driver
	.import		_tgi_unload
	.import		_tgi_init
	.import		_tgi_geterror
	.import		_tgi_clear
	.import		_tgi_setcolor
	.import		_tgi_setpalette
	.import		_tgi_getmaxx
	.import		_tgi_getmaxy
	.import		_tgi_getaspectratio
	.import		_tgi_gotoxy
	.import		_tgi_line
	.import		_tgi_lineto
	.import		_tgi_ellipse
	.import		_tgi_bar
	.import		_tgi_imulround
	.export		_main

.segment	"RODATA"

L0017:
	.byte	$D7,$41,$52,$4E,$49,$4E,$47,$3A,$20,$D4,$48,$49,$53,$20,$50,$52
	.byte	$4F,$47,$52,$41,$4D,$20,$4E,$45,$45,$44,$53,$20,$54,$48,$45,$20
	.byte	$D4,$C7,$C9,$0D,$44,$52,$49,$56,$45,$52,$20,$4F,$4E,$20,$44,$49
	.byte	$53,$4B,$21,$20,$D0,$52,$45,$53,$53,$20,$27,$59,$27,$20,$49,$46
	.byte	$20,$59,$4F,$55,$20,$48,$41,$56,$45,$0D,$49,$54,$20,$2D,$20,$41
	.byte	$4E,$59,$20,$4F,$54,$48,$45,$52,$20,$4B,$45,$59,$20,$45,$58,$49
	.byte	$54,$53,$2E,$0D,$00
L0020:
	.byte	$CF,$CB,$2E,$20,$D0,$4C,$45,$41,$53,$45,$20,$57,$41,$49,$54,$20
	.byte	$50,$41,$54,$49,$45,$4E,$54,$4C,$59,$2E,$2E,$2E,$0D,$00
L0113:
	.byte	$54,$47,$49,$A4,$4C,$4F,$41,$44,$A4,$44,$52,$49,$56,$45,$52,$00
L0117:
	.byte	$54,$47,$49,$A4,$49,$4E,$49,$54,$00
L000C:
	.byte	$25,$53,$3A,$20,$25,$44,$0D,$00
L012B:
	.byte	$C4,$4F,$4E,$45,$0D,$00

.segment	"BSS"

_MaxX:
	.res	2,$00
_MaxY:
	.res	2,$00
_AspectRatio:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ CheckError (__near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CheckError: near

	.dbg	func, "CheckError", "00", static, "_CheckError"
	.dbg	sym, "S", "00", auto, 0
	.dbg	sym, "Error", "00", auto, -1

.segment	"CODE"

;
; {
;
	.dbg	line, "tgidemo.c", 39
	jsr     pushax
;
; unsigned char Error = tgi_geterror ();
;
	.dbg	line, "tgidemo.c", 40
	jsr     _tgi_geterror
	jsr     pusha
;
; if (Error != TGI_ERR_OK) {
;
	.dbg	line, "tgidemo.c", 41
	ldy     #$00
	lda     (sp),y
	beq     L0009
;
; printf ("%s: %d\n", S, Error);
;
	.dbg	line, "tgidemo.c", 42
	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	ldy     #$06
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	ldy     #$06
	jsr     _printf
;
; if (doesclrscrafterexit ()) {
;
	.dbg	line, "tgidemo.c", 43
	jsr     _doesclrscrafterexit
	tax
	beq     L012E
;
; cgetc ();
;
	.dbg	line, "tgidemo.c", 44
	jsr     _cgetc
;
; exit (EXIT_FAILURE);
;
	.dbg	line, "tgidemo.c", 46
	ldx     #$00
L012E:	lda     #$01
	jsr     _exit
;
; }
;
	.dbg	line, "tgidemo.c", 48
L0009:	jmp     incsp3
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ DoWarning (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoWarning: near

	.dbg	func, "DoWarning", "00", static, "_DoWarning"

.segment	"CODE"

;
; "it - any other key exits.\n");
;
	.dbg	line, "tgidemo.c", 58
	lda     #<(L0017)
	ldx     #>(L0017)
	jsr     pushax
	ldy     #$02
	jsr     _printf
;
; if (tolower (cgetc ()) != 'y') {
;
	.dbg	line, "tgidemo.c", 59
	jsr     _cgetc
	ldx     #$00
	jsr     _tolower
	cpx     #$00
	bne     L012F
	cmp     #$59
	beq     L0019
;
; exit (EXIT_SUCCESS);
;
	.dbg	line, "tgidemo.c", 60
L012F:	ldx     #$00
	txa
	jsr     _exit
;
; printf ("OK. Please wait patiently...\n");
;
	.dbg	line, "tgidemo.c", 62
L0019:	lda     #<(L0020)
	ldx     #>(L0020)
	jsr     pushax
	ldy     #$02
	jmp     _printf
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ DoCircles (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoCircles: near

	.dbg	func, "DoCircles", "00", static, "_DoCircles"
	.dbg	sym, "I", "00", auto, -1
	.dbg	sym, "Color", "00", auto, -2
	.dbg	sym, "X", "00", auto, -4
	.dbg	sym, "Y", "00", auto, -6

.segment	"RODATA"

L0024:
	.byte	$01
	.byte	$08

.segment	"CODE"

;
; unsigned char Color = COLOR_FORE;
;
	.dbg	line, "tgidemo.c", 72
	jsr     decsp1
	lda     #$01
	jsr     pusha
;
; unsigned X = MaxX / 2;
;
	.dbg	line, "tgidemo.c", 73
	lda     _MaxX
	ldx     _MaxX+1
	jsr     shrax1
	jsr     pushax
;
; unsigned Y = MaxY / 2;
;
	.dbg	line, "tgidemo.c", 74
	lda     _MaxY
	ldx     _MaxY+1
	jsr     shrax1
	jsr     pushax
;
; tgi_setpalette (Palette);
;
	.dbg	line, "tgidemo.c", 76
	lda     #<(L0024)
	ldx     #>(L0024)
	jsr     _tgi_setpalette
;
; while (!kbhit ()) {
;
	.dbg	line, "tgidemo.c", 77
	jmp     L002E
;
; tgi_setcolor (COLOR_FORE);
;
	.dbg	line, "tgidemo.c", 78
L002C:	lda     #$01
	jsr     _tgi_setcolor
;
; tgi_line (0, 0, MaxX, MaxY);
;
	.dbg	line, "tgidemo.c", 79
	jsr     decsp6
	lda     #$00
	ldy     #$04
	sta     (sp),y
	iny
	sta     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	sta     (sp),y
	lda     _MaxX
	ldy     #$00
	sta     (sp),y
	iny
	lda     _MaxX+1
	sta     (sp),y
	lda     _MaxY
	ldx     _MaxY+1
	jsr     _tgi_line
;
; tgi_line (0, MaxY, MaxX, 0);
;
	.dbg	line, "tgidemo.c", 80
	jsr     decsp6
	lda     #$00
	ldy     #$04
	sta     (sp),y
	iny
	sta     (sp),y
	lda     _MaxY
	ldy     #$02
	sta     (sp),y
	iny
	lda     _MaxY+1
	sta     (sp),y
	lda     _MaxX
	ldy     #$00
	sta     (sp),y
	iny
	lda     _MaxX+1
	sta     (sp),y
	ldx     #$00
	txa
	jsr     _tgi_line
;
; tgi_setcolor (Color);
;
	.dbg	line, "tgidemo.c", 81
	ldy     #$04
	lda     (sp),y
	jsr     _tgi_setcolor
;
; for (I = 10; I < 240; I += 10) {
;
	.dbg	line, "tgidemo.c", 82
	lda     #$0A
	ldy     #$05
L0130:	sta     (sp),y
	cmp     #$F0
	bcs     L003F
;
; tgi_ellipse (X, Y, I, tgi_imulround (I, AspectRatio));
;
	.dbg	line, "tgidemo.c", 83
	jsr     decsp5
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$03
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$06
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0A
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     _AspectRatio
	ldx     _AspectRatio+1
	jsr     _tgi_imulround
	jsr     _tgi_ellipse
;
; for (I = 10; I < 240; I += 10) {
;
	.dbg	line, "tgidemo.c", 82
	ldy     #$05
	clc
	lda     #$0A
	adc     (sp),y
	jmp     L0130
;
; Color = Color == COLOR_FORE ? COLOR_BACK : COLOR_FORE;
;
	.dbg	line, "tgidemo.c", 85
L003F:	dey
	lda     (sp),y
	cmp     #$01
	bne     L0131
	lda     #$00
	jmp     L0133
L0131:	lda     #$01
L0133:	sta     (sp),y
;
; while (!kbhit ()) {
;
	.dbg	line, "tgidemo.c", 77
L002E:	jsr     _kbhit
	tax
	jeq     L002C
;
; cgetc ();
;
	.dbg	line, "tgidemo.c", 88
	jsr     _cgetc
;
; tgi_clear ();
;
	.dbg	line, "tgidemo.c", 89
	jsr     _tgi_clear
;
; }
;
	.dbg	line, "tgidemo.c", 90
	jmp     incsp6
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ DoCheckerboard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoCheckerboard: near

	.dbg	func, "DoCheckerboard", "00", static, "_DoCheckerboard"
	.dbg	sym, "X", "00", auto, -2
	.dbg	sym, "Y", "00", auto, -4
	.dbg	sym, "Color", "00", auto, -5

.segment	"RODATA"

L0058:
	.byte	$01
	.byte	$00

.segment	"CODE"

;
; tgi_setpalette (Palette);
;
	.dbg	line, "tgidemo.c", 100
	jsr     decsp5
	lda     #<(L0058)
	ldx     #>(L0058)
	jsr     _tgi_setpalette
;
; Color = COLOR_BACK;
;
	.dbg	line, "tgidemo.c", 101
	lda     #$00
	tay
L0134:	sta     (sp),y
;
; for (Y = 0; Y <= MaxY; Y += 10) {
;
	.dbg	line, "tgidemo.c", 103
	iny
	lda     #$00
	sta     (sp),y
	iny
L013F:	sta     (sp),y
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     _MaxY
	sta     tmp1
	txa
	sbc     _MaxY+1
	ora     tmp1
	bcc     L0066
	jne     L0064
;
; for (X = 0; X <= MaxX; X += 10) {
;
	.dbg	line, "tgidemo.c", 104
L0066:	ldy     #$03
	lda     #$00
	sta     (sp),y
	iny
L013E:	sta     (sp),y
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     _MaxX
	sta     tmp1
	txa
	sbc     _MaxX+1
	ora     tmp1
	bcc     L006F
	jne     L006D
;
; tgi_setcolor (Color);
;
	.dbg	line, "tgidemo.c", 105
L006F:	ldy     #$00
	lda     (sp),y
	jsr     _tgi_setcolor
;
; tgi_bar (X, Y, X+9, Y+9);
;
	.dbg	line, "tgidemo.c", 106
	jsr     decsp6
	ldy     #$0A
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0A
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$09
	bcc     L007B
	inx
L007B:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$09
	bcc     L007D
	inx
L007D:	jsr     _tgi_bar
;
; Color = Color == COLOR_FORE ? COLOR_BACK : COLOR_FORE;
;
	.dbg	line, "tgidemo.c", 107
	ldy     #$00
	lda     (sp),y
	cmp     #$01
	bne     L0135
	tya
	jmp     L0137
L0135:	lda     #$01
L0137:	sta     (sp),y
;
; if (kbhit ()) {
;
	.dbg	line, "tgidemo.c", 108
	jsr     _kbhit
	tax
	beq     L006E
;
; cgetc ();
;
	.dbg	line, "tgidemo.c", 109
	jsr     _cgetc
;
; tgi_clear ();
;
	.dbg	line, "tgidemo.c", 110
	jsr     _tgi_clear
;
; return;
;
	.dbg	line, "tgidemo.c", 111
	jmp     incsp5
;
; for (X = 0; X <= MaxX; X += 10) {
;
	.dbg	line, "tgidemo.c", 104
L006E:	ldy     #$03
	clc
	lda     #$0A
	adc     (sp),y
	sta     (sp),y
	iny
	txa
	adc     (sp),y
	jmp     L013E
;
; Color = Color == COLOR_FORE ? COLOR_BACK : COLOR_FORE;
;
	.dbg	line, "tgidemo.c", 114
L006D:	ldy     #$00
	lda     (sp),y
	cmp     #$01
	bne     L0138
	tya
	jmp     L013A
L0138:	lda     #$01
L013A:	sta     (sp),y
;
; for (Y = 0; Y <= MaxY; Y += 10) {
;
	.dbg	line, "tgidemo.c", 103
	iny
	clc
	lda     #$0A
	adc     (sp),y
	sta     (sp),y
	iny
	lda     #$00
	adc     (sp),y
	jmp     L013F
;
; Color = Color == COLOR_FORE ? COLOR_BACK : COLOR_FORE;
;
	.dbg	line, "tgidemo.c", 116
L0064:	dey
	lda     (sp),y
	cmp     #$01
	bne     L013B
	tya
	jmp     L0134
L013B:	lda     #$01
;
; while (1) {
;
	.dbg	line, "tgidemo.c", 102
	jmp     L0134
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ DoDiagram (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoDiagram: near

	.dbg	func, "DoDiagram", "00", static, "_DoDiagram"
	.dbg	sym, "XOrigin", "00", auto, -2
	.dbg	sym, "YOrigin", "00", auto, -4
	.dbg	sym, "Amp", "00", auto, -6
	.dbg	sym, "X", "00", auto, -8
	.dbg	sym, "Y", "00", auto, -10
	.dbg	sym, "I", "00", auto, -12

.segment	"RODATA"

L0096:
	.byte	$01
	.byte	$00

.segment	"CODE"

;
; tgi_setpalette (Palette);
;
	.dbg	line, "tgidemo.c", 130
	ldy     #$0C
	jsr     subysp
	lda     #<(L0096)
	ldx     #>(L0096)
	jsr     _tgi_setpalette
;
; tgi_setcolor (COLOR_FORE);
;
	.dbg	line, "tgidemo.c", 131
	lda     #$01
	jsr     _tgi_setcolor
;
; YOrigin = MaxY / 2;
;
	.dbg	line, "tgidemo.c", 134
	lda     _MaxY
	ldx     _MaxY+1
	jsr     shrax1
	ldy     #$08
	jsr     staxysp
;
; XOrigin = 10;
;
	.dbg	line, "tgidemo.c", 135
	ldy     #$0A
	tya
	sta     (sp),y
	lda     #$00
	iny
	sta     (sp),y
;
; Amp     = (MaxY - 19) / 2;
;
	.dbg	line, "tgidemo.c", 136
	lda     _MaxY
	ldx     _MaxY+1
	sec
	sbc     #$13
	bcs     L00A4
	dex
L00A4:	jsr     shrax1
	ldy     #$06
	jsr     staxysp
;
; tgi_line (XOrigin, 10, XOrigin, MaxY-10);
;
	.dbg	line, "tgidemo.c", 139
	jsr     decsp6
	ldy     #$11
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$0A
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	ldy     #$11
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _MaxY
	ldx     _MaxY+1
	sec
	sbc     #$0A
	bcs     L00AA
	dex
L00AA:	jsr     _tgi_line
;
; tgi_line (XOrigin-2, 12, XOrigin, 10);
;
	.dbg	line, "tgidemo.c", 140
	jsr     decsp6
	ldy     #$11
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$02
	bcs     L00AD
	dex
L00AD:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$0C
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	ldy     #$11
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _tgi_line
;
; tgi_lineto (XOrigin+2, 12);
;
	.dbg	line, "tgidemo.c", 141
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L00B3
	inx
L00B3:	jsr     pushax
	ldx     #$00
	lda     #$0C
	jsr     _tgi_lineto
;
; tgi_line (XOrigin, YOrigin, MaxX-10, YOrigin);
;
	.dbg	line, "tgidemo.c", 144
	jsr     decsp6
	ldy     #$11
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0F
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _MaxX
	ldx     _MaxX+1
	sec
	sbc     #$0A
	bcs     L00B9
	dex
L00B9:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0F
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _tgi_line
;
; tgi_line (MaxX-12, YOrigin-2, MaxX-10, YOrigin);
;
	.dbg	line, "tgidemo.c", 145
	jsr     decsp6
	lda     _MaxX
	ldx     _MaxX+1
	sec
	sbc     #$0C
	bcs     L00BD
	dex
L00BD:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0F
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$02
	bcs     L00BF
	dex
L00BF:	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _MaxX
	ldx     _MaxX+1
	sec
	sbc     #$0A
	bcs     L00C1
	dex
L00C1:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0F
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _tgi_line
;
; tgi_lineto (MaxX-12, YOrigin+2);
;
	.dbg	line, "tgidemo.c", 146
	lda     _MaxX
	ldx     _MaxX+1
	sec
	sbc     #$0C
	bcs     L00C5
	dex
L00C5:	jsr     pushax
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L00C7
	inx
L00C7:	jsr     _tgi_lineto
;
; tgi_gotoxy (XOrigin, YOrigin);
;
	.dbg	line, "tgidemo.c", 149
	ldy     #$0D
	jsr     pushwysp
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _tgi_gotoxy
;
; for (I = 0; I <= 360; I += 5) {
;
	.dbg	line, "tgidemo.c", 150
	ldy     #$00
	tya
	sta     (sp),y
	iny
L0140:	sta     (sp),y
	cmp     #$01
	bne     L00D2
	dey
	lda     (sp),y
	cmp     #$69
L00D2:	jcs     L00CC
;
; X = (int) (((long) (MaxX - 19) * I) / 360);
;
	.dbg	line, "tgidemo.c", 153
	lda     _MaxX
	ldx     _MaxX+1
	sec
	sbc     #$13
	bcs     L00DA
	dex
L00DA:	jsr     push0ax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosumul0ax
	jsr     pusheax
	ldx     #$01
	lda     #$68
	jsr     tosudiv0ax
	ldy     #$04
	jsr     staxysp
;
; Y = (int) (((long) Amp * -sin (I)) / 256);
;
	.dbg	line, "tgidemo.c", 154
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     axlong
	jsr     pusheax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _sin
	jsr     negax
	jsr     axlong
	jsr     tosmuleax
	txa
	ldx     sreg
	ldy     sreg+1
	cpy     #$80
	ldy     #$02
	jsr     staxysp
;
; tgi_lineto (XOrigin + X, YOrigin + Y);
;
	.dbg	line, "tgidemo.c", 157
	ldy     #$0A
	lda     (sp),y
	ldy     #$04
	clc
	adc     (sp),y
	pha
	ldy     #$0B
	lda     (sp),y
	ldy     #$05
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$0A
	lda     (sp),y
	ldy     #$04
	clc
	adc     (sp),y
	pha
	ldy     #$0B
	lda     (sp),y
	ldy     #$05
	adc     (sp),y
	tax
	pla
	jsr     _tgi_lineto
;
; for (I = 0; I <= 360; I += 5) {
;
	.dbg	line, "tgidemo.c", 150
	ldy     #$00
	clc
	lda     #$05
	adc     (sp),y
	sta     (sp),y
	iny
	lda     #$00
	adc     (sp),y
	jmp     L0140
;
; cgetc ();
;
	.dbg	line, "tgidemo.c", 160
L00CC:	jsr     _cgetc
;
; tgi_clear ();
;
	.dbg	line, "tgidemo.c", 161
	jsr     _tgi_clear
;
; }
;
	.dbg	line, "tgidemo.c", 162
	ldy     #$0C
	jmp     addysp
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ DoLines (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoLines: near

	.dbg	func, "DoLines", "00", static, "_DoLines"
	.dbg	sym, "X", "00", auto, -2

.segment	"RODATA"

L00E8:
	.byte	$01
	.byte	$00

.segment	"CODE"

;
; tgi_setpalette (Palette);
;
	.dbg	line, "tgidemo.c", 171
	jsr     decsp2
	lda     #<(L00E8)
	ldx     #>(L00E8)
	jsr     _tgi_setpalette
;
; tgi_setcolor (COLOR_FORE);
;
	.dbg	line, "tgidemo.c", 172
	lda     #$01
	jsr     _tgi_setcolor
;
; for (X = 0; X <= MaxY; X += 10) {
;
	.dbg	line, "tgidemo.c", 174
	ldy     #$00
	tya
	sta     (sp),y
	iny
L0141:	sta     (sp),y
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     _MaxY
	sta     tmp1
	txa
	sbc     _MaxY+1
	ora     tmp1
	bcc     L00F2
	jne     L00F0
;
; tgi_line (0, 0, MaxY, X);
;
	.dbg	line, "tgidemo.c", 175
L00F2:	jsr     decsp6
	tya
	ldy     #$04
	sta     (sp),y
	iny
	sta     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	sta     (sp),y
	lda     _MaxY
	ldy     #$00
	sta     (sp),y
	iny
	lda     _MaxY+1
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _tgi_line
;
; tgi_line (0, 0, X, MaxY);
;
	.dbg	line, "tgidemo.c", 176
	jsr     decsp6
	lda     #$00
	ldy     #$04
	sta     (sp),y
	iny
	sta     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _MaxY
	ldx     _MaxY+1
	jsr     _tgi_line
;
; tgi_line (MaxY, MaxY, 0, MaxY-X);
;
	.dbg	line, "tgidemo.c", 177
	jsr     decsp6
	lda     _MaxY
	ldy     #$04
	sta     (sp),y
	iny
	lda     _MaxY+1
	sta     (sp),y
	lda     _MaxY
	ldy     #$02
	sta     (sp),y
	iny
	lda     _MaxY+1
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	sta     (sp),y
	lda     _MaxY
	sec
	ldy     #$06
	sbc     (sp),y
	pha
	lda     _MaxY+1
	iny
	sbc     (sp),y
	tax
	pla
	jsr     _tgi_line
;
; tgi_line (MaxY, MaxY, MaxY-X, 0);
;
	.dbg	line, "tgidemo.c", 178
	jsr     decsp6
	lda     _MaxY
	ldy     #$04
	sta     (sp),y
	iny
	lda     _MaxY+1
	sta     (sp),y
	lda     _MaxY
	ldy     #$02
	sta     (sp),y
	iny
	lda     _MaxY+1
	sta     (sp),y
	lda     _MaxY
	sec
	ldy     #$06
	sbc     (sp),y
	pha
	lda     _MaxY+1
	iny
	sbc     (sp),y
	tax
	pla
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	txa
	jsr     _tgi_line
;
; for (X = 0; X <= MaxY; X += 10) {
;
	.dbg	line, "tgidemo.c", 174
	ldy     #$00
	clc
	lda     #$0A
	adc     (sp),y
	sta     (sp),y
	iny
	lda     #$00
	adc     (sp),y
	jmp     L0141
;
; cgetc ();
;
	.dbg	line, "tgidemo.c", 181
L00F0:	jsr     _cgetc
;
; tgi_clear ();
;
	.dbg	line, "tgidemo.c", 182
	jsr     _tgi_clear
;
; }
;
	.dbg	line, "tgidemo.c", 183
	jmp     incsp2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"
	.dbg	sym, "Border", "00", auto, -1

.segment	"CODE"

;
; DoWarning ();
;
	.dbg	line, "tgidemo.c", 193
	jsr     decsp1
	jsr     _DoWarning
;
; tgi_load_driver (tgi_stddrv);
;
	.dbg	line, "tgidemo.c", 196
	lda     #<(_tgi_stddrv)
	ldx     #>(_tgi_stddrv)
	jsr     _tgi_load_driver
;
; CheckError ("tgi_load_driver");
;
	.dbg	line, "tgidemo.c", 197
	lda     #<(L0113)
	ldx     #>(L0113)
	jsr     _CheckError
;
; tgi_init ();
;
	.dbg	line, "tgidemo.c", 204
	jsr     _tgi_init
;
; CheckError ("tgi_init");
;
	.dbg	line, "tgidemo.c", 205
	lda     #<(L0117)
	ldx     #>(L0117)
	jsr     _CheckError
;
; tgi_clear ();
;
	.dbg	line, "tgidemo.c", 206
	jsr     _tgi_clear
;
; MaxX = tgi_getmaxx ();
;
	.dbg	line, "tgidemo.c", 209
	jsr     _tgi_getmaxx
	sta     _MaxX
	stx     _MaxX+1
;
; MaxY = tgi_getmaxy ();
;
	.dbg	line, "tgidemo.c", 210
	jsr     _tgi_getmaxy
	sta     _MaxY
	stx     _MaxY+1
;
; AspectRatio = tgi_getaspectratio ();
;
	.dbg	line, "tgidemo.c", 211
	jsr     _tgi_getaspectratio
	sta     _AspectRatio
	stx     _AspectRatio+1
;
; Border = bordercolor (COLOR_BLACK);
;
	.dbg	line, "tgidemo.c", 214
	lda     #$00
	jsr     _bordercolor
	ldy     #$00
	sta     (sp),y
;
; DoCircles ();
;
	.dbg	line, "tgidemo.c", 217
	jsr     _DoCircles
;
; DoCheckerboard ();
;
	.dbg	line, "tgidemo.c", 218
	jsr     _DoCheckerboard
;
; DoDiagram ();
;
	.dbg	line, "tgidemo.c", 219
	jsr     _DoDiagram
;
; DoLines ();
;
	.dbg	line, "tgidemo.c", 220
	jsr     _DoLines
;
; tgi_unload ();
;
	.dbg	line, "tgidemo.c", 224
	jsr     _tgi_unload
;
; (void) bordercolor (Border);
;
	.dbg	line, "tgidemo.c", 231
	ldy     #$00
	lda     (sp),y
	jsr     _bordercolor
;
; printf ("Done\n");
;
	.dbg	line, "tgidemo.c", 234
	lda     #<(L012B)
	ldx     #>(L012B)
	jsr     pushax
	ldy     #$02
	jsr     _printf
;
; return EXIT_SUCCESS;
;
	.dbg	line, "tgidemo.c", 235
	ldx     #$00
	txa
;
; }
;
	.dbg	line, "tgidemo.c", 236
	jmp     incsp1
	.dbg	line

.endproc

